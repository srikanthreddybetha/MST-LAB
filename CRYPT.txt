USING Hmac:
Example 1:
  CODE:
// Node.js program to demonstrate the	
// crypto.createHmac() method

// Includes crypto module
const crypto = require('crypto');

// Defining key
const secret = 'RG';

// Calling createHmac method
const hash = crypto.createHmac('sha256', secret)
					
				// updating data
				.update('RajeshGunda')

				// Encoding to be used
				.digest('hex');

// Displays output
console.log(hash);

OUTPUT:
  a08116905e92633e4f30eefd1276206b259305c8783642fc5b7f51c089187939
  
 
Example 2:
  CODE:
    // Node.js program to demonstrate the	
// crypto.createHmac() method

// Defining myfile
const myfile = process.argv[1];

// Includes crypto and fs module
const crypto = require('crypto');
const fs = require('fs');

// Creating Hmac
const creathmac = crypto.createHmac('sha1', 'CS-Portal!');

// Creating read stream
const readfile = fs.createReadStream(myfile);

readfile.on('readable', () => {
	
// Calling read method to read data
const data = readfile.read();
if (data)
	
	// Updating
	creathmac.update(data);
else
{
	// Encoding and displaying filename
	console.log("The hmac object returns:",
	`${creathmac.digest('hex')} ${myfile}`);
}
});
console.log("Program done!");
console.log();

OUTPUT:
  Program done!
The hmac object returns: 4605d44703c2620fc2574c9a9216bd3267457324 /run_dir/interp.js
